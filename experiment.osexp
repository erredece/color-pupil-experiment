---
API: 2.1
OpenSesame: 3.2.0a33
Platform: nt
---
set width 1024
set uniform_coordinates yes
set title "New experiment"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set mouse_backend psycho
set keyboard_backend psycho
set height 768
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic no
set font_family mono
set font_bold no
set experiment_path "D:/GitHub/color-pupil-experiment"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend psycho
set clock_backend psycho
set canvas_backend psycho
set bidi no
set background "#818181"

define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run new_inline_script_2 always

define sketchpad fixation_point
	set duration 1000
	set description "Displays stimuli"
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0

define inline_script init_var
	set description "Executes Python code"
	___run__
	var.letters = ['F', 'J', 'W', 'H', 'Z', 'Q', 'E', 'X', 'A']
	var.loops = 10
	var.numTrials = 5
	__end__
	set _prepare ""

define inline_script new_inline_script
	set description "Executes Python code"
	___run__
	import random
	import time
	
	letterListRed = []
	letterListBlue = []
	
	for i in range(var.loops):
		letterListRed.append(var.letters[random.randint(0, len(var.letters) -1)])
		letterListBlue.append(var.letters[random.randint(0, len(var.letters) -1)])
		while letterListBlue[i] == letterListBlue[i-1] and i > 1:
			letterListBlue[i] = var.letters[random.randint(0, len(var.letters) -1)]
		while letterListRed[i] == letterListBlue[i] or (letterListRed[i] == letterListRed[i-1] and i > 1): 
			letterListRed[i] = var.letters[random.randint(0, len(var.letters) -1)]
	
	
	loopcounter = 0
	__end__
	set _prepare ""

define inline_script new_inline_script_1
	set description "Executes Python code"
	___run__
	
	loopcounter += 1
	__end__
	set _prepare ""

define inline_script new_inline_script_2
	set description "Executes Python code"
	___run__
	from psychopy import visual, event, core
	import gc
	import numpy as np
	import random
	import scipy.misc
	
	presentationTime = 100
	loops = 70
	totalTrials = 5
	myKeyboard = keyboard()
	
	class experiment(object):
		
		def __init__(self, practice = False):
			self.practice = practice
		
		def run(self, loops, pressKeyText, myKeyboard):
			newTrial = trial()
			newTrial.setup(loops)
			newTrial.showTarget(pressKeyText, myKeyboard)
			startTime = 0
			loopcounter = 1
			while loopcounter <= loops:
				startTime = clock.time()
				newTrial.presentStimulus(loopcounter)
				core.wait(presentationTime * 0.001 * 0.7) # 70ms + 30 from processing the code
				print(clock.time() - startTime)
				loopcounter += 1		
			newTrial.getAnswer(self, myKeyboard)
	
	class trial(experiment):
		letters = ["A", "D", "E", "G", "H", "M", "S", "W", "X", "Z"]
		
		def addLetter(letter):
			array = scipy.misc.imread(exp.experiment_path + "\letters/" + str(letter) + ".png")* 0.00075
			return array[::-1]
		
		array = {
		"A" : addLetter("A"),
		"D" : addLetter("D"),
		"E" : addLetter("E"),
		"G" : addLetter("G"),
		"H" : addLetter("H"),
		"M" : addLetter("M"),
		"S" : addLetter("S"),
		"W" : addLetter("W"),
		"X" : addLetter("X"),
		"Z" : addLetter("Z")
		}
		
		redWeights = letters[:len(letters)/2] 
		
		def setup(self, loops):
			trial.target = random.choice(trial.letters)
			trial.nonTargets = []
			trial.targetPool = []
			trial.nonTargetPool = []
			trial.red = []
			trial.blue = []
			trial.targetChance = random.uniform(0,1)
			for letter in trial.letters:
				if letter != trial.target:
					trial.nonTargets.append(letter)
			for loop in range(loops):
				trial.targetPool.append(random.choice(trial.letters))
				trial.nonTargetPool.append(random.choice(trial.nonTargets))
				while trial.targetPool[loop] == trial.targetPool[loop - 1] and loop > 1:
					trial.targetPool[loop] = random.choice(trial.letters)
				while (trial.nonTargetPool[loop] == trial.nonTargetPool[loop - 1] and loop > 1) or trial.nonTargetPool[loop] == trial.targetPool[loop]:
					trial.nonTargetPool[loop] = random.choice(trial.nonTargets)
			if (trial.target in trial.redWeights and trial.targetChance <= 0.8 ) or (trial.target not in trial.redWeights and trial.targetChance > 0.8):
				trial.red = trial.targetPool
				trial.blue = trial.nonTargetPool
			else:
				trial.red = trial.nonTargetPool
				trial.blue = trial.targetPool
				
			trial.arrowOrientation = np.random.choice(["left", "right"])
			gc.collect()
			return(trial.target, trial.nonTargets, trial.targetPool, trial.nonTargetPool, trial.red, trial.blue, trial.targetChance, trial.arrowOrientation)
		
		def presentStimulus(self, loopcounter):
			redTex = np.random.uniform(0.25, 1, (256,256, 4)) + trial.array[trial.red[loopcounter - 1]]
			blueTex = np.random.uniform(0.25, 1, (256,256, 4)) + trial.array[trial.blue[loopcounter -1]]
			redCircle = visual.GratingStim(win, tex=redTex, mask='raisedCos', color='red', size=256, pos=(-256, 0))
			blueCircle = visual.GratingStim(win, tex=blueTex, mask='raisedCos', color='blue', size=256, pos=(256, 0))
			arrowVert = [(-0.4,0.05),(-0.4,-0.05),(-.2,-0.05),(-.2,-0.1),(0,0),(-.2,0.1),(-.2,0.05)] 
			arrow = visual.ShapeStim(win, vertices=arrowVert, fillColor='green', size=256, lineColor='black', pos=(64, 0))
			if trial.arrowOrientation == "left":
				arrow.vertices = np.negative(arrowVert)
				arrow.pos = (-64, 0)
			fixation = visual.TextStim(win, text="+", height=10, pos=(0,0), color="black")
			redCircle.draw()
			blueCircle.draw()
			arrow.draw()
			fixation.draw()
			win.flip()	
		
		def showTarget(self, pressKeyText, myKeyboard):
			targetText = visual.TextStim(win, text = trial.target, color='green', pos=(0, 128), height=64, wrapWidth=700)
			targetText.draw()
			pressKeyText.draw()
			win.flip()
			myKeyboard.get_key()	
			myKeyboard.flush()
		
		def getAnswer(self, experiment, myKeyboard):
			keysString = ""
			trial.correct = False
			while True:
				answerInstructionsText = visual.TextStim(win, text = "How many times did you see letter " + trial.target + "?", color='black', pos=(0, 128), height=24, wrapWidth=700)
				answerText = visual.TextStim(win, text = keysString + "_", color='black', pos=(0, -128), height=18, wrapWidth=700)
				submitText = visual.TextStim(win, text = "Press Enter to submit", color='black', pos=(0, -256), height=18, wrapWidth=700)
				answerInstructionsText.draw()
				answerText.draw()
				submitText.draw()
				win.flip()
				keys = myKeyboard.get_key()
				if 'return' in keys:
					break
				elif 'backspace' in keys:
					keysString = keysString[:-1]
				elif len(keys[0]) > 1:
					keysString = keysString + " "
				else:
					keysString = keysString + keys[0]
			
			myKeyboard.flush()
			try:
				trial.answer = int(keysString)
			except:
				trial.answer = 0
			
			if trial.answer == trial.targetPool.count(trial.target):
				trial.correct = True
			
			if experiment.practice == True:
				correctText = ("FALSE", "red")
				if trial.correct == True:
					correctText = ("CORRECT", "green")
				while True:
					feedbackText = visual.TextStim(win, text = correctText[0], color=correctText[1], pos=(0, 128), height=64, wrapWidth=700)
					feedbackText2 = visual.TextStim(win, text = "Press Q to exit practice mode.", color="black", pos=(0, -224), height=18, wrapWidth=700)
					feedbackText3 = visual.TextStim(win, text = "Otherwise, press space to continue in practice mode.", color="black", pos=(0, -256), height=18, wrapWidth=700)
					feedbackText.draw()
					feedbackText2.draw()
					feedbackText3.draw()
					win.flip()
					keys = myKeyboard.get_key()
					if 'q' in keys:
						experiment.practice = False
						print("Exiting practice mode...")
						break
					elif 'space' in keys:
						print("Running another practice trial.")
						break
					myKeyboard.flush()
			return(trial.answer, trial.correct)
	
	instructions = visual.TextStim(win, text= "Please, count how many times the target letter appears", color='black', pos=(0, 256), height=32, wrapWidth=800)
	pressKeyText = visual.TextStim(win, text= "Press any key to continue.", color='black', pos=(0, -256), height=26, wrapWidth=800)
	instructions.draw()
	pressKeyText.draw()
	win.flip()
	myKeyboard.get_key()
	myKeyboard.flush()
	
	newExperiment = experiment(practice=True)
	while newExperiment.practice == True:
		newExperiment.run(loops, pressKeyText, myKeyboard)
	
	print("Success.")
	for trials in range(totalTrials):
		newExperiment.run(loops, pressKeyText, myKeyboard)
	__end__
	set _prepare ""

define loop new_loop
	set source_file ""
	set source table
	set repeat "[=var.numTrials]"
	set order sequential
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 empty_column ""
	run new_sequence

define loop new_loop_1
	set source_file ""
	set source table
	set repeat "[=var.loops]"
	set order sequential
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 empty_column ""
	run new_sequence_1

define sequence new_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run fixation_point always
	run new_inline_script always
	run new_loop_1 always

define sequence new_sequence_1
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run present_stimuli always
	run new_inline_script_1 always

define sketchpad present_stimuli
	set duration 100
	set description "Displays stimuli"
	draw circle color="#0000ff" fill=1 penwidth=1 r=125 show_if=always x=-256 y=0 z_index=0
	draw circle color="#aa0000" fill=1 penwidth=1 r=125 show_if=always x=256 y=0 z_index=0
	draw textline center=1 color="#000000" font_bold=no font_family=mono font_italic=no font_size=100 html=yes show_if=always text="[=letterListBlue\\[loopcounter\\]]" x=-256 y=0 z_index=0
	draw textline center=1 color="#000000" font_bold=no font_family=mono font_italic=no font_size=100 html=yes show_if=always text="[=letterListRed\\[loopcounter\\]]" x=256 y=0 z_index=0

define sketchpad welcome
	set start_response_interval no
	set reset_variables no
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="OpenSesame 3.1 <i>Jazzy James</i>" x=0 y=0 z_index=0

