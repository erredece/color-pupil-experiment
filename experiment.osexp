---
API: 2.1
OpenSesame: 3.2.4
Platform: nt
---
set width 1920
set uniform_coordinates yes
set title "New experiment"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set psychopy_screen 0
set psychopy_monitor testMonitor
set mouse_backend psycho
set keyboard_backend psycho
set height 1080
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic no
set font_family mono
set font_bold no
set experiment_path "D:\\GitHub\\color-pupil-experiment"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend psycho
set clock_backend psycho
set canvas_backend psycho
set bidi no
set background "#7F7F7F"

define inline_script calibrate
	set description "Executes Python code"
	___run__
	import numpy as np
	from datamatrix import series as srs
	
	ydata = np.array(pupil_trace)
	ysmooth = srs._smooth(ydata, winlen=15)
	xdata = np.linspace(0, len(ydata)*30, len(ydata))
	
	var.ymax = ysmooth[:30].max()
	var.ymin = ysmooth[:30].min()
	var.ydiff = var.ymax-var.ymin
	ydiff_list.append(var.ydiff)
		
	if len(ydiff_list) > 1:
		if ydiff_list[-1] > ydiff_list[-2]:
			pupil_response = 'blue' if var.color == 'blue' else 'red'
		else:
			pupil_response = 'red' if var.color == 'blue' else 'blue'
	else:
		pupil_response = ''
	pupil_responses.append(pupil_response)
	
	if len(pupil_responses) > 1:
		print(pupil_responses, pupil_responses[-2:])
		if 'red' not in pupil_responses[-2:]:
			var.step = 'red_up'
			var.red_intensity = min(100, var.red_intensity+var.step_size)
		elif 'blue' not in pupil_responses[-2:]:
			var.step = 'red_down'
			var.red_intensity = max(10, var.red_intensity-var.step_size)
		else:
			var.step = ''
	else:
		var.step = ''
	print(var.step)
	__end__
	set _prepare ""

define sequence calibration
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run settings always
	run instructions_check always
	run init always
	run collect_pupil_size always
	run instructions_equiluminance always
	run equiluminance_loop always

define inline_script collect_pupil_size
	set description "Executes Python code"
	___run__
	def collect_pupil_size():
		
		global pupil_trace, time_trace
		
		last_sample_time = 0
		pupil_trace = []
		time_trace = []
		keep_going = True
		sampling_rate = 1000. / 30
		var.response = None
		yield
	
		while keep_going:
			# If a response is given, set the coroutines duration to 0, causing
			# it to stop
			if var.response is not None:
				items['coroutines'].var.duration = 0
				break	
			# Collect pupil size
			t = clock.time()
			if t - last_sample_time >= sampling_rate:
				last_sample_time = t
				pupil_trace.append(eyetracker.pupil_size())
				time_trace.append(t)
		
			keep_going = yield
	__end__
	set _prepare ""

define coroutines coroutines
	set function_name collect_pupil_size
	set flush_keyboard yes
	set end_after_item ""
	set duration "[duration_total]"
	set description "Run items simultaneously"
	run keyboard_response end="[duration_total]" runif=always start=0
	run fixation_dot_1 end="[duration_stim]" runif=always start="[duration_stim]"
	run stimulus_on end=0 runif=always start=0

define sketchpad done
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=20 html=yes show_if=always text="<b>Finished!</b><br /><br />Press any key to exit" x=0 y=0 z_index=0

define inline_script end_phase
	set description "Executes Python code"
	___run__
	eyetracker.log('end_phase stimulus')
	__end__
	set _prepare ""

define loop equiluminance_loop
	set source_file ""
	set source table
	set repeat "[repeat_equiluminance]"
	set order sequential
	set description "Repeatedly runs another item"
	set cycles 2
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 color "[color1]"
	setcycle 0 duration_stim "[stimon_equiluminance]"
	setcycle 0 duration_total "=var.stimon_equiluminance+var.stimoff_equiluminance"
	setcycle 0 mode calibrate
	setcycle 1 color "[color2]"
	setcycle 1 duration_stim "[stimon_equiluminance]"
	setcycle 1 duration_total "=var.stimon_equiluminance+var.stimoff_equiluminance"
	setcycle 1 mode calibrate
	run pupil_sequence

define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run main_instructions always
	run pygaze_init always
	run calibration always
	run main always

define inline_script experiment_script
	set description "Executes Python code"
	___run__
	from psychopy import visual, event, core
	import gc
	import numpy as np
	import random
	import os
	import re
	import scipy.misc
	import sys
	
	class settings(object):
		presentationTime = (250) # In milliseconds
		loops = (28)
		totalTrials = (5)
		myKeyboard = keyboard()
		orientations = {"left" : (-256, 0), "right" : (256, 0)}
		tones = ("bright", "dark")
		redColours = {"bright" : (255, 0, 0), "dark" : (var.red_intensity * 2.55, 0, 0)}
		blueColours = {"bright" : (0, 0, 255), "dark" : (0, 0, var.blue_intensity * 2.55)}
		defaultContrast = (0.75)
		contrastParameter = (0.05)
		responses = []
	
	class experiment(settings):	
		def __init__(self, practice = False):
			self.practice = practice
		
		def getLetters(self):
			'''Gets letters from the "letters" folder and generates an array from them'''
			lettersPath = exp.experiment_path + "\letters/"
			experiment.letters = os.listdir(lettersPath)
			experiment.lettersArray = {}
			for letter in range(len(experiment.letters)):
				experiment.letters[letter] = str(re.search('(.?).png', experiment.letters[letter]).group(1))
				array = scipy.misc.imread(lettersPath + experiment.letters[letter] + ".png") * 0.001
				experiment.lettersArray.update({experiment.letters[letter]:array[::-1]})
			if not experiment.letters:
				raise Exception("Failed to find letters! Add a directory named \"letters\" and add the letter files as \".png\" files!")
			return(experiment.letters, experiment.lettersArray)
		
		def getWeights(self):
			'''Sets weights for which a letter will appear on the red or the blue stimuli'''
			random.shuffle(experiment.letters)
			experiment.redWeights = experiment.letters[:len(experiment.letters)/2] 
			return experiment.redWeights
			
		def blankScreen(self, duration):
			'''Shows a blank screen with the fixation point for a specific duration (in seconds)'''
			fixationPoint = visual.TextStim(win, text="+", height=20, pos=(0,2), color="black")
			fixationPoint.draw()
			win.flip()
			core.wait(duration)
		
		def showInstructions(self):
			'''Presents instructions to the user'''
			instructionsBox = visual.Rect(
				win, 
				width= 1100, 
				height = 400, 
				pos = (0, 128), 
				lineColor="navy", 
				lineWidth = 3, 
				fillColor = "lightblue"
				)
			instructions1 = visual.TextStim(
				win, 
				text= "Now we will proceed to the core of the experiment. On every trial you will first see a letter which you have to remember. After pressing a key, you will see a red and a blue circle on the screen, as well as an arrow in the center of the screen pointing at one of them. Every 250ms, a letter will be flashed inside both circles.", 
				color='black', 
				pos=(0, 256), 
				height=26, 
				wrapWidth=1000
				)
			instructions2 = visual.TextStim(
				win, 
				text= "Your task simply consists on, first, staring at the center of the screen. There is a fixation point inside the arrow where you should keep your sight on. Meanwhile, without moving your sight away, you have to count how many times the letter that you saw before shows up on one of the circles.", 
				color='black', 
				pos=(0, 128), 
				height=26, 
				wrapWidth=1000
				)
			instructions3 = visual.TextStim(
				win, 
				text= "You will now perform as many practice trials as you feel you need. Once you grasp the idea behind this task, you may proceed to perform the experiment.", 
				color='black', 
				pos=(0, 0), 
				height=26, 
				wrapWidth=1000
				)
			
			experiment.pressKeyText = visual.TextStim(
				win, 
				text= "Press any key to continue.", 
				color='black', 
				pos=(0, -256), 
				height=26, 
				wrapWidth=800
				)
			instructionsBox.draw()
			instructions1.draw()
			instructions2.draw()
			instructions3.draw()
			experiment.pressKeyText.draw()
			win.flip()
			self.myKeyboard.get_key()
			self.myKeyboard.flush()
			return experiment.pressKeyText
			
		def practiceExited(self):
			'''Lets the subject know that has exited practice mode and the real experiment begins now'''
			messageBox = visual.Rect(
				win, 
				width= 1100, 
				height = 192, 
				pos = (0, 128), 
				lineColor="navy", 
				lineWidth = 3, 
				fillColor = "lightblue"
				)
			message1 = visual.TextStim(
				win, 
				text= "From now on, all trials are part of the actual experiment. No feedback will be given throughout it, but at the end you will receive your final score", 
				color='black', 
				pos=(0, 160), 
				height=26, 
				wrapWidth=1000
				)
			message2 = visual.TextStim(
				win, 
				text= "Good luck and have fun!", 
				color='black', 
				pos=(0, 72), 
				height=32, 
				wrapWidth=1000
				)
			messageBox.draw()
			message1.draw()
			message2.draw()
			experiment.pressKeyText.draw()
			win.flip()
			self.myKeyboard.get_key()
			self.myKeyboard.flush()
			
		def endScreen(self):
			'''End screen where we give the final accuracy score and conclude the experiment'''
			
			experiment.finalScore = "{0:.2f}".format(float(experiment.responses.count(True)) / float(len(experiment.responses)) * 100)
			scoreBox = visual.Rect(
				win, 
				width= 1100, 
				height = 192, 
				pos = (0, 100), 
				lineColor="navy", 
				lineWidth = 3, 
				fillColor = "lightblue"
				)
		
			scoreText = visual.TextStim(
				win, 
				text= "That is the end of the experiment! Your final score was %s %%." % experiment.finalScore, 
				color='black', 
				pos=(0, 160), 
				height=26, 
				wrapWidth=1000
				)
			
			endText = visual.TextStim(
				win, 
				text= "Thank you for participating! Please, press any space to quit and end the experiment.", 
				color='black', 
				pos=(0, 72), 
				height=26, 
				wrapWidth=1000
				)
			
			scoreBox.draw()
			scoreText.draw()
			endText.draw()
			win.flip()
			self.myKeyboard.get_key()
			self.myKeyboard.flush()
			eyetracker.log("var accuracy %s" % experiment.finalScore)
			return experiment.finalScore
			
		def resetContrasts(self):
			'''Resets contrasts to the default value at the start of the experiment'''
			experiment.brightRedContrast = 	experiment.darkRedContrast = experiment.brightBlueContrast = experiment.darkBlueContrast = self.defaultContrast
			return(experiment.brightRedContrast, experiment.darkRedContrast, experiment.brightBlueContrast, experiment.darkBlueContrast)
		
		def logSettings(self):
			'''Logs settings to the EDF'''
			eyetracker.log("var list_letters %s" % " ".join(sorted(self.letters)))
			eyetracker.log("var presentations %d" % self.loops)
			eyetracker.log("var total_trials %d" % self.totalTrials)
			eyetracker.log("var bright_red_colour %s" % str(self.redColours["bright"]))
			eyetracker.log("var dark_red_colour %s" % str(self.redColours["dark"]))
			eyetracker.log("var bright_blue_colour %s" % str(self.blueColours["bright"]))
			eyetracker.log("var dark_blue_colour %s" % str(self.blueColours["dark"]))
			eyetracker.log("var default_contrast %f" % self.defaultContrast)
			
		def run(self):
			'''Runs the actual experiment'''
			newTrial = trial()
			newTrial.setup(self)
			newTrial.showTarget()
			self.blankScreen(1)
			#startTime = 0
			for loop in range(self.loops):
				#startTime = clock.time()
				newTrial.presentStimulus(loop)
				eyetracker.log("var pupil_size %f" % eyetracker.pupil_size())
				core.wait(self.presentationTime * 0.001 * 0.8) # The 0.8 parameter is an adjustement to be done to compensate the time it takes to run every iteration
				#print(clock.time() - startTime)
			self.blankScreen(0.5)
			newTrial.checkAnswer(self)
			newTrial.logTracker(self)
			
		def start(self):
			'''Initilializes the experiment'''
			self.getLetters()
			self.getWeights()
			self.resetContrasts()
			self.logSettings()
			self.showInstructions()
			while self.practice == True:
				self.run()
			self.getWeights()
			self.practiceExited()
			for trials in range(self.totalTrials):
				eyetracker.log("start_trial [%d]" % (trials + 1))
				self.run()
				eyetracker.log("end_trial")
			self.endScreen()
	
	class trial(experiment):
		def setup(self, experiment):
			'''General trial set up'''
			self.setTarget()
			self.setupStimuli(experiment)
			self.setupArrow()
			gc.collect()
			
		def setTarget(self):
			'''Sets the target and the letter pools'''
			trial.target = random.choice(experiment.letters)
			trial.nonTargets = []
			trial.red = []
			trial.blue = []
			trial.targetChance = random.uniform(0,1)
			trial.targetAppearances = random.randint(3,7)
			
			self.generatePools()
			while trial.targetPool.count(trial.target) != trial.targetAppearances:
				self.generatePools()
			
			if (trial.target in experiment.redWeights and trial.targetChance <= 0.8 ) or (trial.target not in experiment.redWeights and trial.targetChance > 0.8):
				trial.red = trial.targetPool
				trial.blue = trial.nonTargetPool
			else:
				trial.red = trial.nonTargetPool
				trial.blue = trial.targetPool	
			return(trial.target, trial.nonTargets, trial.red, trial.blue, trial.targetChance)
			
		def generatePools(self):
			'''Generates the pools of letters for a single trial'''
			trial.targetPool = []
			trial.nonTargetPool = []
			for letter in experiment.letters:
				if letter != trial.target:
					trial.nonTargets.append(letter)
					
			for loop in range(self.loops):
				trial.targetPool.append(random.choice(experiment.letters))
				trial.nonTargetPool.append(random.choice(trial.nonTargets))
				
			while self.checkPool(trial.targetPool):
				random.shuffle(trial.targetPool)
				
			while self.checkPool(trial.nonTargetPool):
				random.shuffle(trial.nonTargetPool)
				
			return(trial.targetPool, trial.nonTargetPool)
			
		def checkPool(self, letterpool):
			''' Checks if a pool of letters has no consecutive items '''
			prev = None
			for item in letterpool:
				if (item == prev) : return True
				prev = item
			return False
		
		def setupStimuli(self, experiment):
			'''Sets up the properties of the stimuli to be presented on the current trial'''
			trial.redTone = random.choice(self.tones)
			trial.blueTone = random.choice(self.tones)
			trial.redContrast = experiment.brightRedContrast if trial.redTone == "bright" else experiment.darkRedContrast
			trial.blueContrast = experiment.brightBlueContrast if trial.blueTone == "bright" else experiment.darkBlueContrast	
			trial.posRed = random.choice(("left", "right"))
			trial.posBlue = next(pos for pos in ("left", "right") if pos not in trial.posRed)
			#trial.posBlue = next(iter(set(("left", "right")) - set (trial.posRed)))	
			#print("Red is the target:", trial.red == trial.targetPool, "Chance:", trial.targetChance, "Red position:", trial.posRed, "Arrow:", trial.arrowOrientation)
			return(trial.posRed, trial.posBlue, trial.redTone, trial.blueTone, trial.redContrast, trial.blueContrast)
			
		def setupArrow(self):
			'''Sets up where will the arrow point'''
			trial.arrowChance = random.uniform(0,1)
			trial.arrowOrientation = "left"
			trial.arrowCorrect = False
			if ((
			trial.red == trial.targetPool and ((trial.targetChance <= 0.8 and trial.posRed == "left") 
			or (trial.targetChance > 0.8 and trial.posRed == "right"))) 
			or (trial.blue == trial.targetPool and ((trial.targetChance <= 0.8 and trial.posRed == "right")
			or (trial.targetChance > 0.8 and trial.posRed == "left")))):
				trial.arrowOrientation = "left"
			else: 
				trial.arrowOrientation = "right"	
			if ((trial.red == trial.targetPool and trial.arrowOrientation == trial.posRed) or
			(trial.blue == trial.targetPool and trial.arrowOrientation == trial.posBlue)):
				trial.arrowCorrect = True
			else:
				trial.arrowCorrect = False		
			return( trial.arrowOrientation, trial.arrowCorrect)
		
		def presentStimulus(self, loopcounter):
			'''Presents a single set of stimuli'''
			redTex = np.random.uniform(0.25, 1, (256,256, 4)) + experiment.lettersArray[trial.red[loopcounter - 1]]
			blueTex = np.random.uniform(0.25, 1, (256,256, 4)) + experiment.lettersArray[trial.blue[loopcounter -1]]
			redCircle = visual.GratingStim(
				win, 
				tex = redTex, 
				mask = 'raisedCos', 
				color = trial.redColours[trial.redTone], 
				colorSpace = 'rgb255',
				size =256, 
				pos = self.orientations[trial.posRed], 
				contrast=trial.redContrast
				)
			
			blueCircle = visual.GratingStim(
				win, 
				tex=blueTex, 
				mask ='raisedCos', 
				color = trial.blueColours[trial.blueTone], 
				colorSpace = 'rgb255',
				size = 256, 
				pos = self.orientations[trial.posBlue],
				contrast = trial.blueContrast
				)
			
			arrowVert = [(-0.4,0.05),(-0.4,-0.05),(-.2,-0.05),(-.2,-0.1),(0,0),(-.2,0.1),(-.2,0.05)] 
			arrow = visual.ShapeStim(
				win, 
				vertices=arrowVert, 
				fillColor='forestgreen', 
				size=256, 
				lineColor='black', 
				pos=(64, 0)
				)
			if trial.arrowOrientation == "left":
				arrow.vertices = np.negative(arrowVert)
				arrow.pos = (-64, 0)
			fixation = visual.TextStim(win, text="+", height=20, pos=(0,2), color="black")
			redCircle.draw()
			blueCircle.draw()
			arrow.draw()
			fixation.draw()
			win.flip()	
		
		def showTarget(self):
			'''Shows the target to the user'''
			targetText = visual.TextStim(
				win, 
				text = trial.target, 
				color='forestgreen', 
				pos=(0, 128), 
				height=256, 
				wrapWidth=700
				)
			targetText.draw()
			experiment.pressKeyText.draw()
			win.flip()
			self.myKeyboard.get_key()	
			self.myKeyboard.flush()
				
		def answerScreen(self):
			'''Prompts screen asking for an answer'''
			#print(trial.targetPool.count(trial.target))
			trial.keysString = ""
			self.myKeyboard.flush()
			answerInstructionsText = visual.TextStim(
				win, 
				text = "How many times did you see letter %s ?" % trial.target, 
				color = 'black', 
				pos = (0, 128), 
				height = 24, 
				wrapWidth = 700 
				)
	
			answerInstructionsText.draw()
			win.flip()
			trial.response = self.myKeyboard.get_key(keylist=['0','1','2','3','4','5','6','7','8','9'])
			self.myKeyboard.flush()
			return trial.response
		
		def checkAnswer(self, experiment):
			'''Checks the answer the answer'''
			self.answerScreen()
			trial.correct = False
			trial.answer = int(trial.response[0])
			if trial.answer == trial.targetPool.count(trial.target):
				trial.correct = True	
			self.setContrasts(experiment)	
			if experiment.practice == True:
				self.practiceMode(experiment)
				self.myKeyboard.flush()	
			else:
				experiment.responses.append(trial.correct)
			return(trial.answer, trial.correct)
			
		def practiceMode(self, experiment):
			'''Gives feedback if practice mode is on'''
			correctText = ("FALSE", "red")
			if trial.correct == True:
				correctText = ("CORRECT", "limegreen")
			while True:
				feedbackText = visual.TextStim(
					win,
					text = correctText[0], 
					color=correctText[1], 
					pos=(0, 128), 
					height=64, 
					wrapWidth=700)
				
				feedbackText2 = visual.TextStim(
					win,
					text = "Letter %s appeared %d times but you answered %d." % (trial.target, trial.targetPool.count(trial.target), trial.answer),
					color= "black",
					pos=(0, 0),
					height= 24,
					wrapWidth=700)
					
				feedbackText3 = visual.TextStim(
					win, 
					text = "Press Q to exit practice mode.", 
					color="black", 
					pos=(0, -224), 
					height=18, 
					wrapWidth=700
					)
				feedbackText4 = visual.TextStim(
					win, 
					text = "Otherwise, press space to continue in practice mode.", 
					color="black", 
					pos=(0, -256), 
					height=18, 
					wrapWidth=700
					)
				feedbackText.draw()
				if trial.correct == False: feedbackText2.draw()
				feedbackText3.draw()
				feedbackText4.draw()
				win.flip()
				keys = self.myKeyboard.get_key()
				if 'q' in keys:
					experiment.practice = False
					break
				elif 'space' in keys:
					break
				self.myKeyboard.flush()
			return experiment.practice
		
		def setContrasts(self, experiment):
			'''Increases or decreases stimuli contrast based on the response being correct or not'''
			if 0.05 <= experiment.brightRedContrast <= 0.95 and trial.redTone == "bright":
				if trial.correct == True:
					experiment.brightRedContrast -= experiment.contrastParameter
				else:
					experiment.brightRedContrast += experiment.contrastParameter
			if 0.05 <= experiment.darkRedContrast <= 0.95 and trial.redTone == "dark":
				if trial.correct == True:
					experiment.darkRedContrast -= experiment.contrastParameter
				else:
					experiment.darkRedContrast += experiment.contrastParameter
			if 0.05 <= experiment.brightBlueContrast <= 0.95 and trial.blueTone == "bright":
				if trial.correct == True:
					experiment.brightBlueContrast -= experiment.contrastParameter
				else:
					experiment.brightBlueContrast += experiment.contrastParameter
			if 0.05 <= experiment.darkBlueContrast <= 0.95 and trial.blueTone == "dark":
				if trial.correct == True:
					experiment.darkBlueContrast -= experiment.contrastParameter
				else:
					experiment.darkBlueContrast += experiment.contrastParameter
	
			return(experiment.brightRedContrast, experiment.darkRedContrast, experiment.brightBlueContrast, experiment.darkBlueContrast)
			
		def logTracker(self, experiment):
			'''Logs variables to the EDF'''
			eyetracker.log("var practicemode %s" % str(experiment.practice))
			eyetracker.log("var trial_answer %s" % trial.answer)
			eyetracker.log("var trial_correct %s" % str(trial.correct))
			eyetracker.log("var target_letter %s" % trial.target)
			if trial.red == trial.targetPool:
				eyetracker.log("var target_object red")
			else:
				eyetracker.log("var target_object blue")
			eyetracker.log("var tone_red %s" % trial.redTone)
			eyetracker.log("var tone_blue %s" % trial.blueTone)
			eyetracker.log("var pos_red %s" % trial.posRed)
			eyetracker.log("var pos_blue %s" % trial.posBlue)
			eyetracker.log("var arrow_orientation %s" % trial.arrowOrientation)
			eyetracker.log("var arrow_correct %s" % trial.arrowCorrect)
			eyetracker.log("var bright_red_contrast %s" % experiment.brightRedContrast)
			eyetracker.log("var dark_red_contrast %s" % experiment.darkRedContrast)
			eyetracker.log("var bright_blue_contrast %s" % experiment.brightBlueContrast)
			eyetracker.log("var dark_blue_contrast %s" % experiment.darkBlueContrast)
			
	newExperiment = experiment(practice = True)
	newExperiment.start()
	__end__
	set _prepare ""

define sketchpad fixation_dot_1
	set duration 2500
	set description "Displays stimuli"
	set background "#000000"
	draw fixdot color=128 show_if=always style="small-cross" x=0 y=0 z_index=0

define sketchpad fixation_dot_1_1
	set duration 2500
	set description "Displays stimuli"
	draw fixdot color=128 show_if=always style="small-cross" x=0 y=0 z_index=0

define inline_script init
	set description "Executes Python code"
	___run__
	import os
	from datamatrix import DataMatrix
	
	ydiff_list = []
	sessiondm = DataMatrix()
	sessionpath = os.path.join(var.pool_folder, 'pupildata-%d.pkl' % var.subject_nr)
	plotpath = os.path.join(var.pool_folder, 'plot-%d' % var.subject_nr)
	
	if var.subject_parity == 'even':
		var.color1 = 'red'
		var.color2 = 'blue'
	else:
		var.color1 = 'blue'
		var.color2 = 'red'
		
	pupil_responses = []
	__end__
	set _prepare ""

define sketchpad instructions_check
	set duration keypress
	set description "Displays stimuli"
	set background black
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=20 html=yes show_if=always text="Look at the central fixation dot<br /><br />The experimenter will check whether your pupil is recorded<br /><br />Press any key to begin" x=0 y=0 z_index=0

define sketchpad instructions_equiluminance
	set duration keypress
	set description "Displays stimuli"
	set background "#000000"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=20 html=yes show_if=always text="<b>Equiluminance calibration</b><br /><br />Look at the central fixation dot<br /><br />You don't need to perform any task<br /><br />Press any key to begin" x=0 y=0 z_index=0

define keyboard_response keyboard_response
	set timeout infinite
	set flush yes
	set event_type keypress
	set duration keypress
	set description "Collects keyboard responses"
	set allowed_responses q

define logger logger
	set description "Logs experimental data"
	set auto_log no
	log response
	log blue_intensity
	log ydiff
	log ymax
	log ymin
	log color
	log red_intensity
	log step

define sequence main
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run new_pygaze_start_recording always
	run experiment_script always
	run new_pygaze_log always
	run new_pygaze_stop_recording always

define inline_script main_instructions
	set description "Executes Python code"
	___run__
	from psychopy import visual
	
	myKeyboard = keyboard()
	
	mainBox = visual.Rect(
		win, 
		width= 1100, 
		height = 400, 
		pos = (0, 128), 
		lineColor="navy", 
		lineWidth = 3, 
		fillColor = "lightblue"
		)
	
	mainText1 = visual.TextStim(
		win, 
		text= "Hello and welcome! Before we run the experiment, we will proceed to perform a calibration in order to have the best setup for you.", 
		color='black', 
		pos=(0, 256), 
		height=26, 
		wrapWidth=1000
		)
		
	mainText2 = visual.TextStim(
		win, 
		text= "For this calibration, you just need to keep your attention fixed on the cross on the middle of the screen, while blue and red circles will show up alternating one and the other. The eyetracker will register your pupil changes and will use this information for the main experiment later.", 
		color='black', 
		pos=(0, 128), 
		height=26, 
		wrapWidth=1000
		)
	
	mainText3 = visual.TextStim(
		win, 
		text= "Please, check that you have completely filled in the consent form! Once you have, press any key to continue.", 
		color='black', 
		pos=(0, 0), 
		height=26, 
		wrapWidth=1000
		)
	
	mainBox.draw()
	mainText1.draw()
	mainText2.draw()
	mainText3.draw()
	win.flip()
	myKeyboard.get_key()
	myKeyboard.flush()
	__end__
	set _prepare ""

define pygaze_init new_pygaze_init
	set tracker_type "Advanced dummy (mouse simulation)"
	set tobiiglasses_udpport 49152
	set tobiiglasses_address "192.168.71.50"
	set smi_send_port 4444
	set smi_recv_port 5555
	set smi_ip "127.0.0.1"
	set sacc_vel_thr 35
	set sacc_acc_thr 9500
	set eyelink_pupil_size_mode area
	set eyelink_force_drift_correct yes
	set description "Initialize and calibrate eye tracker"
	set calibrate yes
	set calbeep no
	set _logfile automatic

define pygaze_log new_pygaze_log
	set throttle 2
	set msg ""
	set description "Writes information to the eye-tracker logfile"
	set auto_log no

define pygaze_start_recording new_pygaze_start_recording
	set status_msg start_experiment
	set description "Puts the eye tracker into recording mode"

define pygaze_stop_recording new_pygaze_stop_recording
	set status_msg stop_experiment
	set description "Stops recording of eye tracking data"

define sequence new_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run pygaze_init always

define sequence pupil_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run set_color always
	run pygaze_drift_correct never
	run pygaze_start_recording always
	run fixation_dot_1 always
	run start_phase always
	run coroutines always
	run end_phase always
	run calibrate "[mode] = calibrate"
	run record "[mode] = record"
	run pygaze_log always
	run pygaze_stop_recording always

define pygaze_drift_correct pygaze_drift_correct
	set ypos 0
	set xpos 0
	set target_style default
	set target_color "[foreground]"
	set fixation_triggered yes
	set draw_target yes
	set description "Perform eye-tracker drift correction"

define pygaze_init pygaze_init
	set tracker_type "Advanced dummy (mouse simulation)"
	set tobiiglasses_udpport 49152
	set tobiiglasses_address "192.168.71.50"
	set smi_send_port 4444
	set smi_recv_port 5555
	set smi_ip "127.0.0.1"
	set sacc_vel_thr 35
	set sacc_acc_thr 9500
	set eyelink_pupil_size_mode area
	set eyelink_force_drift_correct yes
	set description "Initialize and calibrate eye tracker"
	set calibrate yes
	set calbeep no
	set _logfile automatic

define pygaze_log pygaze_log
	set throttle 2
	set msg ""
	set description "Writes information to the eye-tracker logfile"
	set auto_log yes

define pygaze_start_recording pygaze_start_recording
	set status_msg "start_calibration_trial [count_pupil_sequence]"
	set description "Puts the eye tracker into recording mode"

define pygaze_stop_recording pygaze_stop_recording
	set status_msg stop_calibration
	set description "Stops recording of eye tracking data"

define inline_script record
	set description "Executes Python code"
	___run__
	from datamatrix import io, SeriesColumn
	
	trialdm = DataMatrix(length=1)
	trialdm.color = var.color
	trialdm.red_intensity = var.red_intensity
	trialdm.blue_intensity = var.blue_intensity
	trialdm.pupil = SeriesColumn(len(pupil_trace), defaultnan=True)
	trialdm.pupil[0] = pupil_trace
	trialdm.time = SeriesColumn(len(time_trace), defaultnan=True)
	trialdm.time[0] = time_trace
	sessiondm <<= trialdm
	
	if var.response != 'q':
		io.writepickle(sessiondm, sessionpath)
		if sessionpath not in exp.data_files:
			exp.data_files.append(sessionpath)
	__end__
	set _prepare ""

define feedback results
	set reset_variables yes
	set duration keypress
	set description "Provides feedback to the participant"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=20 html=yes show_if=always text="Results<br /><br />The blue intensity was kept constant<br /><br />Red intensity: [red_intensity]%<br />Blue intensity: [blue_intensity]%<br /><br />Press any key to exit" x=-1 y=5 z_index=0

define inline_script set_color
	set description "Executes Python code"
	set _run ""
	___prepare__
	if var.color == 'red':
		var.rgb = 'rgb(%d%%,0%%,0%%)' % var.red_intensity
	elif var.color == 'blue':
		var.rgb = 'rgb(0%%, 0%%, %d%%)' % var.blue_intensity
	else:
		raise Exception('Invalid color')
	__end__

define form_base settings
	set timeout infinite
	set spacing 5
	set rows "1;1;1;1;1;1;1;1;1;1"
	set only_render no
	set margins "10;10;10;10"
	set description "A generic form plug-in"
	set cols "2;2"
	set background black
	set _theme gray
	widget 0 0 2 1 label text="Settings for equiluminance"
	widget 0 2 1 1 label text="Trials per color"
	widget 1 2 1 1 text_input text=20 var=repeat_equiluminance
	widget 0 3 1 1 label text="Stim-on duration (ms)"
	widget 1 3 1 1 text_input text=1000 var=stimon_equiluminance
	widget 0 4 1 1 label text="Stim-off duration (ms)"
	widget 1 4 1 1 text_input text=2000 var=stimoff_equiluminance
	widget 0 5 1 1 label text="Red intensity (adjusted) (%)"
	widget 1 5 1 1 text_input text=70 var=red_intensity
	widget 0 6 1 1 label text="Blue intensity (fixed) (%)"
	widget 1 6 1 1 text_input text=70 var=blue_intensity
	widget 0 7 1 1 label text="Step size (%)"
	widget 1 7 1 1 text_input text=1 var=step_size
	widget 0 9 2 1 button text=Ok


define inline_script start_phase
	set description "Executes Python code"
	___run__
	eyetracker.log('start_phase stimulus')
	__end__
	set _prepare ""

define sketchpad stimulus_on
	set duration keypress
	set description "Displays stimuli"
	set background "#000000"
	draw circle color="[rgb]" fill=1 penwidth=1 r=288 show_if=always x=0 y=0 z_index=0
	draw fixdot color=128 show_if=always style="small-cross" x=0 y=0 z_index=0

