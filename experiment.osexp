---
API: 2.1
OpenSesame: 3.2.1
Platform: nt
---
set width 1024
set uniform_coordinates yes
set title "New experiment"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set psychopy_screen 0
set psychopy_monitor testMonitor
set mouse_backend psycho
set keyboard_backend psycho
set height 768
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic no
set font_family mono
set font_bold no
set experiment_path "D:\\GitHub\\color-pupil-experiment"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend psycho
set clock_backend psycho
set canvas_backend psycho
set bidi no
set background "#7F7F7F"

define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run new_pygaze_init always
	run new_pygaze_start_recording always
	run experiment_script always
	run new_pygaze_stop_recording always

define inline_script experiment_script
	set description "Executes Python code"
	___run__
	from psychopy import visual, event, core
	import gc
	import numpy as np
	import random
	import os
	import re
	import scipy.misc
	import sys
	
	class settings(object):
		presentationTime = (100) # In milliseconds
		loops = (70)
		totalTrials = (5)
		myKeyboard = keyboard()
		orientations = {"left" : (-256, 0), "right" : (256, 0)}
		tones = ("bright", "dark")
		redColours = {"bright" : "#FF0000", "dark" : "#7F0000"}
		blueColours = {"bright" : "#0000FF", "dark" : "#00007F"}
		defaultContrast = (0.75)
		contrastParameter = (0.05)
		answers = []
	
	class experiment(settings):	
		def __init__(self, practice = False):
			self.practice = practice
		
		def getLetters(self):
			'''Gets letters from the "letters" folder and generates an array from them'''
			lettersPath = exp.experiment_path + "\letters/"
			experiment.letters = os.listdir(lettersPath)
			experiment.lettersArray = {}
			for letter in range(len(experiment.letters)):
				experiment.letters[letter] = str(re.search('(.?).png', experiment.letters[letter]).group(1))
				array = scipy.misc.imread(lettersPath + experiment.letters[letter] + ".png") * 0.00075
				experiment.lettersArray.update({experiment.letters[letter]:array[::-1]})
			if not experiment.letters:
				raise Exception("Failed to find letters! Add a directory named \"letters\" and add the letter files as \".png\" files!")
			return(experiment.letters, experiment.lettersArray)
		
		def getWeights(self):
			'''Sets weights for which a letter will appear on the red or the blue stimuli'''
			random.shuffle(experiment.letters)
			experiment.redWeights = experiment.letters[:len(experiment.letters)/2] 
			return experiment.redWeights
		
		def showInstructions(self):
			'''Presents instructions to the user'''
			instructionsBox = visual.Rect(
				win, 
				width= 1100, 
				height = 400, 
				pos = (0, 128), 
				lineColor="navy", 
				lineWidth = 3, 
				fillColor = "lightblue"
				)
			instructions1 = visual.TextStim(
				win, 
				text= "On this experiment, you will see a red and a blue circle on the screen and an arrow pointing at one of them. Every 100ms, a letter will be flashed inside both circles.", 
				color='black', 
				pos=(0, 256), 
				height=26, 
				wrapWidth=1000
				)
			instructions2 = visual.TextStim(
				win, 
				text= "Your task simply consists on, first, looking at the center of the screen. There is a cross, in the middle of the arrow, where you should keep your sight on. While you keep staring at the cross, you will have to count how many times a certain letter, specified before every trial, appears in one of the circles.", 
				color='black', 
				pos=(0, 128), 
				height=26, 
				wrapWidth=1000
				)
			instructions3 = visual.TextStim(
				win, 
				text= "You will now perform as many practice trials as you feel you need. Once you grasp the idea behind this task, you may proceed to perform the experiment.", 
				color='black', 
				pos=(0, 0), 
				height=26, 
				wrapWidth=1000
				)
			
			experiment.pressKeyText = visual.TextStim(
				win, 
				text= "Press any key to continue.", 
				color='black', 
				pos=(0, -256), 
				height=26, 
				wrapWidth=800
				)
			instructionsBox.draw()
			instructions1.draw()
			instructions2.draw()
			instructions3.draw()
			experiment.pressKeyText.draw()
			win.flip()
			self.myKeyboard.get_key()
			self.myKeyboard.flush()
			return experiment.pressKeyText
			
		def practiceExited(self):
			'''Lets the subject know that has exited practice mode and the real experiment begins now'''
			messageBox = visual.Rect(
				win, 
				width= 1100, 
				height = 192, 
				pos = (0, 128), 
				lineColor="navy", 
				lineWidth = 3, 
				fillColor = "lightblue"
				)
			message1 = visual.TextStim(
				win, 
				text= "From now on, all trials are part of the actual experiment. No feedback will be given throughout it, but at the end you will receive your final score", 
				color='black', 
				pos=(0, 160), 
				height=26, 
				wrapWidth=1000
				)
			message2 = visual.TextStim(
				win, 
				text= "Good luck and have fun!", 
				color='black', 
				pos=(0, 72), 
				height=32, 
				wrapWidth=1000
				)
			messageBox.draw()
			message1.draw()
			message2.draw()
			experiment.pressKeyText.draw()
			win.flip()
			self.myKeyboard.get_key()
			self.myKeyboard.flush()
			
		def endScreen(self):
			'''End screen where we give the final accuracy score and conclude the experiment'''
			
			experiment.finalScore = "{0:.2f}".format(float(experiment.answers.count(True)) / float(len(experiment.answers)) * 100)
			scoreBox = visual.Rect(
				win, 
				width= 1100, 
				height = 192, 
				pos = (0, 100), 
				lineColor="navy", 
				lineWidth = 3, 
				fillColor = "lightblue"
				)
		
			scoreText = visual.TextStim(
				win, 
				text= "That is the end of the experiment! Your final score was %s." % experiment.finalScore, 
				color='black', 
				pos=(0, 160), 
				height=26, 
				wrapWidth=1000
				)
			
			endText = visual.TextStim(
				win, 
				text= "Thank you for participating! Please, press any space to quit and end the experiment.", 
				color='black', 
				pos=(0, 72), 
				height=26, 
				wrapWidth=1000
				)
			
			scoreBox.draw()
			scoreText.draw()
			endText.draw()
			win.flip()
			self.myKeyboard.get_key()
			self.myKeyboard.flush()
			eyetracker.log("var [accuracy] [%s]" % experiment.finalScore)
			return experiment.finalScore
			
		def resetContrasts(self):
			'''Resets contrasts to the default value at the start of the experiment'''
			experiment.brightRedContrast = 	experiment.darkRedContrast = experiment.brightBlueContrast = experiment.darkBlueContrast = self.defaultContrast
			return(experiment.brightRedContrast, experiment.darkRedContrast, experiment.brightBlueContrast, experiment.darkBlueContrast)
		
		def logSettings(self):
			'''Logs settings to the EDF'''
			eyetracker.log("var [list_letters] [%s]" % " ".join(sorted(self.letters)))
			eyetracker.log("var [presentations] [%d]" % self.loops)
			eyetracker.log("var [total_trials] [%d]" % self.totalTrials)
			eyetracker.log("var [bright_red_colour] [%s]" % self.redColours["bright"])
			eyetracker.log("var [dark_red_colour] [%s]" % self.redColours["dark"])
			eyetracker.log("var [bright_blue_colour] [%s]" % self.blueColours["bright"])
			eyetracker.log("var [dark_blue_colour] [%s]" % self.blueColours["dark"])
			eyetracker.log("var [default_contrast] [%f]" % self.defaultContrast)
			
		def run(self):
			'''Runs the actual experiment'''
			newTrial = trial()
			newTrial.setup(self)
			newTrial.showTarget()
			startTime = 0
			for loop in range(self.loops):
				startTime = clock.time()
				newTrial.presentStimulus(loop)
				eyetracker.log("var [pupil_size] [%f]" % eyetracker.pupil_size())
				core.wait(self.presentationTime * 0.001 * 0.6) # 60ms + 30 from processing the code
				#print(clock.time() - startTime)
			newTrial.getAnswer(self)
			newTrial.logTracker(self)
			
		def start(self):
			'''Initilializes the experiment'''
			self.getLetters()
			self.getWeights()
			self.resetContrasts()
			self.logSettings()
			self.showInstructions()
			while self.practice == True:
				self.run()
			self.getWeights()
			self.practiceExited()
			for trials in range(self.totalTrials):
				eyetracker.log("start_trial [%d]" % (trials + 1))
				self.run()
				eyetracker.log("end_trial")
			self.endScreen()
	
	class trial(experiment):
		def setup(self, experiment):
			'''General trial set up'''
			self.setTarget()
			self.setupStimuli(experiment)
			self.setupArrow()
			gc.collect()
			
		def setTarget(self):
			'''Sets the target and the letter pools'''
			trial.target = random.choice(experiment.letters)
			trial.nonTargets = []
			trial.targetPool = []
			trial.nonTargetPool = []
			trial.red = []
			trial.blue = []
			trial.targetChance = random.uniform(0,1)
			for letter in experiment.letters:
				if letter != trial.target:
					trial.nonTargets.append(letter)
			for loop in range(self.loops):
				trial.targetPool.append(random.choice(experiment.letters))
				trial.nonTargetPool.append(random.choice(trial.nonTargets))
				while trial.targetPool[loop] == trial.targetPool[loop - 1] and loop > 1:
					trial.targetPool[loop] = random.choice(experiment.letters)
				while (trial.nonTargetPool[loop] == trial.nonTargetPool[loop - 1] and loop > 1) or trial.nonTargetPool[loop] == trial.targetPool[loop]:
					trial.nonTargetPool[loop] = random.choice(trial.nonTargets)
			if (trial.target in experiment.redWeights and trial.targetChance <= 0.8 ) or (trial.target not in experiment.redWeights and trial.targetChance > 0.8):
				trial.red = trial.targetPool
				trial.blue = trial.nonTargetPool
			else:
				trial.red = trial.nonTargetPool
				trial.blue = trial.targetPool	
			return(trial.target, trial.nonTargets, trial.targetPool, trial.nonTargetPool, trial.red, trial.blue, trial.targetChance)
		
		def setupStimuli(self, experiment):
			'''Sets up the properties of the stimuli to be presented on the current trial'''
			trial.redTone = random.choice(self.tones)
			trial.blueTone = random.choice(self.tones)
			trial.redContrast = experiment.brightRedContrast if trial.redTone == "bright" else experiment.darkRedContrast
			trial.blueContrast = experiment.brightBlueContrast if trial.blueTone == "bright" else experiment.darkBlueContrast	
			trial.posRed = random.choice(("left", "right"))
			trial.posBlue = next(pos for pos in ("left", "right") if pos not in trial.posRed)
			#trial.posBlue = next(iter(set(("left", "right")) - set (trial.posRed)))	
			#print("Red is the target:", trial.red == trial.targetPool, "Chance:", trial.targetChance, "Red position:", trial.posRed, "Arrow:", trial.arrowOrientation)
			return(trial.posRed, trial.posBlue, trial.redTone, trial.blueTone, trial.redContrast, trial.blueContrast)
			
		def setupArrow(self):
			'''Sets up where will the arrow point'''
			trial.arrowChance = random.uniform(0,1)
			trial.arrowOrientation = "left"
			trial.arrowCorrect = False
			if ((
			trial.red == trial.targetPool and ((trial.targetChance <= 0.8 and trial.posRed == "left") 
			or (trial.targetChance > 0.8 and trial.posRed == "right"))) 
			or (trial.blue == trial.targetPool and ((trial.targetChance <= 0.8 and trial.posRed == "right")
			or (trial.targetChance > 0.8 and trial.posRed == "left")))):
				trial.arrowOrientation = "left"
			else: 
				trial.arrowOrientation = "right"	
			if ((trial.red == trial.targetPool and trial.arrowOrientation == trial.posRed) or
			(trial.blue == trial.targetPool and trial.arrowOrientation == trial.posBlue)):
				trial.arrowCorrect = True
			else:
				trial.arrowCorrect = False		
			return( trial.arrowOrientation, trial.arrowCorrect)
		
		def presentStimulus(self, loopcounter):
			'''Presents a single set of stimuli'''
			redTex = np.random.uniform(0.25, 1, (256,256, 4)) + experiment.lettersArray[trial.red[loopcounter - 1]]
			blueTex = np.random.uniform(0.25, 1, (256,256, 4)) + experiment.lettersArray[trial.blue[loopcounter -1]]
			redCircle = visual.GratingStim(
				win, 
				tex = redTex, 
				mask = 'raisedCos', 
				color = trial.redColours[trial.redTone], 
				size =256, 
				pos = self.orientations[trial.posRed], 
				contrast=trial.redContrast
				)
			
			blueCircle = visual.GratingStim(
				win, 
				tex=blueTex, 
				mask ='raisedCos', 
				color = trial.blueColours[trial.blueTone], 
				size = 256, 
				pos = self.orientations[trial.posBlue],
				contrast = trial.blueContrast
				)
			
			arrowVert = [(-0.4,0.05),(-0.4,-0.05),(-.2,-0.05),(-.2,-0.1),(0,0),(-.2,0.1),(-.2,0.05)] 
			arrow = visual.ShapeStim(
				win, 
				vertices=arrowVert, 
				fillColor='forestgreen', 
				size=256, 
				lineColor='black', 
				pos=(64, 0)
				)
			if trial.arrowOrientation == "left":
				arrow.vertices = np.negative(arrowVert)
				arrow.pos = (-64, 0)
			fixation = visual.TextStim(win, text="+", height=20, pos=(0,2), color="black")
			redCircle.draw()
			blueCircle.draw()
			arrow.draw()
			fixation.draw()
			win.flip()	
		
		def showTarget(self):
			'''Shows the target to the user'''
			targetText = visual.TextStim(
				win, 
				text = trial.target, 
				color='forestgreen', 
				pos=(0, 128), 
				height=256, 
				wrapWidth=700
				)
			targetText.draw()
			experiment.pressKeyText.draw()
			win.flip()
			self.myKeyboard.get_key()	
			self.myKeyboard.flush()
			
		def answerScreen(self):
			'''Prompts screen asking for an answer'''
			#print(trial.targetPool.count(trial.target))
			trial.keysString = ""
			while True:
				answerInstructionsText = visual.TextStim(
					win, 
					text = "How many times did you see letter " + trial.target + "?", 
					color = 'black', 
					pos = (0, 128), 
					height = 24, 
					wrapWidth = 700 
					)
				answerText = visual.TextStim(
					win, 
					text = trial.keysString + "_", 
					color='black', 
					pos=(0, -128), 
					height=18, 
					wrapWidth=700
					)
				submitText = visual.TextStim(
					win, 
					text = "Press Enter to submit", 
					color='black', 
					pos=(0, -256), 
					height=18, 
					wrapWidth=700
					)
				answerInstructionsText.draw()
				answerText.draw()
				submitText.draw()
				win.flip()
				keys = self.myKeyboard.get_key()
				if 'return' in keys:
					break
				elif 'backspace' in keys:
					trial.keysString = trial.keysString[:-1]
				elif len(keys[0]) > 1:
					trial.keysString = trial.keysString + " "
				else:
					trial.keysString = trial.keysString + keys[0]
			self.myKeyboard.flush()
			return trial.keysString
		
		def getAnswer(self, experiment):
			'''Retrieves the answer'''
			self.answerScreen()
			trial.correct = False
			try:
				trial.answer = int(trial.keysString)
			except:
				trial.answer = None
			if trial.answer == trial.targetPool.count(trial.target):
				trial.correct = True	
			self.setContrasts(experiment)	
			if experiment.practice == True:
				self.practiceMode(experiment)
				self.myKeyboard.flush()	
			else:
				experiment.answers.append(trial.correct)
			return(trial.answer, trial.correct)
			
		def practiceMode(self, experiment):
			'''Gives feedback if practice mode is on'''
			correctText = ("FALSE", "red")
			if trial.correct == True:
				correctText = ("CORRECT", "limegreen")
			while True:
				feedbackText = visual.TextStim(
					win,
					text = correctText[0], 
					color=correctText[1], 
					pos=(0, 128), 
					height=64, 
					wrapWidth=700)
				feedbackText2 = visual.TextStim(
					win, 
					text = "Press Q to exit practice mode.", 
					color="black", 
					pos=(0, -224), 
					height=18, 
					wrapWidth=700
					)
				feedbackText3 = visual.TextStim(
					win, 
					text = "Otherwise, press space to continue in practice mode.", 
					color="black", 
					pos=(0, -256), 
					height=18, 
					wrapWidth=700
					)
				feedbackText.draw()
				feedbackText2.draw()
				feedbackText3.draw()
				win.flip()
				keys = self.myKeyboard.get_key()
				if 'q' in keys:
					experiment.practice = False
					break
				elif 'space' in keys:
					break
				self.myKeyboard.flush()
			return experiment.practice
		
		def setContrasts(self, experiment):
			'''Increases or decreases stimuli contrast based on the response being correct or not'''
			if 0.05 <= experiment.brightRedContrast <= 0.95 and trial.redTone == "bright":
				if trial.correct == True:
					experiment.brightRedContrast -= experiment.contrastParameter
				else:
					experiment.brightRedContrast += experiment.contrastParameter
			if 0.05 <= experiment.darkRedContrast <= 0.95 and trial.redTone == "dark":
				if trial.correct == True:
					experiment.darkRedContrast -= experiment.contrastParameter
				else:
					experiment.darkRedContrast += experiment.contrastParameter
			if 0.05 <= experiment.brightBlueContrast <= 0.95 and trial.blueTone == "bright":
				if trial.correct == True:
					experiment.brightBlueContrast -= experiment.contrastParameter
				else:
					experiment.brightBlueContrast += experiment.contrastParameter
			if 0.05 <= experiment.darkBlueContrast <= 0.95 and trial.blueTone == "dark":
				if trial.correct == True:
					experiment.darkBlueContrast -= experiment.contrastParameter
				else:
					experiment.darkBlueContrast += experiment.contrastParameter
	
			return(experiment.brightRedContrast, experiment.darkRedContrast, experiment.brightBlueContrast, experiment.darkBlueContrast)
			
		def logTracker(self, experiment):
			'''Logs variables to the EDF'''
			eyetracker.log("var [practice:mode] [%s]" % str(experiment.practice))
			eyetracker.log("var [trial_answer] [%s]" % trial.answer)
			eyetracker.log("var [trial_correct] [%s]" % str(trial.correct))
			eyetracker.log("var [target_letter] [%s]" % trial.target)
			if trial.red == trial.targetPool:
				eyetracker.log("var [target_object] [red]")
			else:
				eyetracker.log("var [target_object] [blue]")
			eyetracker.log("var [tone_red] [%s]" % trial.redTone)
			eyetracker.log("var [tone_blue] [%s]" % trial.blueTone)
			eyetracker.log("var [pos_red] [%s]" % trial.posRed)
			eyetracker.log("var [pos_blue] [%s]" % trial.posBlue)
			eyetracker.log("var [arrow_orientation] [%s]" % trial.arrowOrientation)
			eyetracker.log("var [arrow_correct] [%s]" % trial.arrowCorrect)
			eyetracker.log("var [bright_red_contrast] [%s]" % experiment.brightRedContrast)
			eyetracker.log("var [dark_red_contrast] [%s]" % experiment.darkRedContrast)
			eyetracker.log("var [bright_blue_contrast] [%s]" % experiment.brightBlueContrast)
			eyetracker.log("var [dark_blue_contrast] [%s]" % experiment.darkBlueContrast)
			
	newExperiment = experiment(practice = True)
	newExperiment.start()
	__end__
	set _prepare ""

define pygaze_init new_pygaze_init
	set tracker_type "Advanced dummy (mouse simulation)"
	set tobiiglasses_udpport 49152
	set tobiiglasses_address "192.168.71.50"
	set smi_send_port 4444
	set smi_recv_port 5555
	set smi_ip "127.0.0.1"
	set sacc_vel_thr 35
	set sacc_acc_thr 9500
	set eyelink_pupil_size_mode area
	set eyelink_force_drift_correct yes
	set description "Initialize and calibrate eye tracker"
	set calibrate yes
	set calbeep yes
	set _logfile automatic

define pygaze_start_recording new_pygaze_start_recording
	set status_msg start_experiment
	set description "Puts the eye tracker into recording mode"

define pygaze_stop_recording new_pygaze_stop_recording
	set status_msg stop_experiment
	set description "Stops recording of eye tracking data"

